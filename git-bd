#!/bin/bash

set -o errexit
set -o pipefail

prompt_delete() {
    local dir="$1"

    echo -n "Are you sure you want to delete '$dir'? (y/n) "
    read response
    if [ "$response" == "y" ]; then
        rm -rf "$dir" || true
    fi
}

branchdir() {
    # OPTIONS_SPEC is parsed by git-sh-setup
    # GIT_DIR is set by git-sh-setup
    source "$(git --exec-path)/git-sh-setup"

    local git_dir="$(git config --get branchdir.git-dir 2> /dev/null || true)"
    if [ -z "$git_dir" ]; then
        git config --add branchdir.git-dir "$(cd -P $GIT_DIR && pwd)"
    else
        GIT_DIR="$git_dir"
    fi
    local branchdir_base="$(git config --get branchdir.base 2> /dev/null || true)"
    if [ -z "$branchdir_base" ]; then
        say "error: branchdir base not set"
        say ""
        say "Have you configured 'branchdir' yet? See 'git branchdir --help'."
        exit 128
    fi
    if ! [ -d "$branchdir_base" ]; then
        mkdir "$branchdir_base"
    fi

    while [ $# -gt 0 ]; do
        OPT="$1"
        shift
        case $OPT in
            --)
                break
                ;;
            -m)
                OPT_m=1
                ;;
            -M)
                OPT_M=1
                ;;
            -d)
                OPT_d=1
                ;;
            -D)
                OPT_D=1
                ;;
        esac
    done

    # validate name?

    local work_tree

    if [[ (-n "$OPT_d" || -n "$OPT_D") && (-n "$OPT_m" || -n "$OPT_M") ]]; then
        usage;
    fi
    if [[ -n "$OPT_D" || -n "$OPT_d" ]]; then
        local name="$1"

        if [ -z "$name" ]; then
            exit 0
        fi

        local B_OPT
        if [ -n "$OPT_D" ]; then
            B_OPT="-D"
        else
            B_OPT="-d"
        fi

        work_tree="$(git config --get branchdir.$name.work-tree)"
        if [ "$(git rev-parse --show-toplevel)" == "$work_tree" ]; then
            die_with_status 128 "error: Cannot delete the branchdir '$name' which you are currently in."
        fi
        prompt_delete "$work_tree"
        if [ -d "$work_tree" ]; then
            die_with_status 128 "fatal: failed to remove work tree: '$work_tree'"
        fi
        git branch $B_OPT "$name"
        git config --remove-section branchdir.$name
        exit 0
    fi
    if [[ -n "$OPT_M" || -n "$OPT_m" ]]; then
        local name="$1"
        local new_name="$2"

        if [ -z "$name" ]; then
            usage
        fi
        if [ -z "$new_name" ]; then
            exit 0
        fi

        local B_OPT
        if [ -n "$OPT_M" ]; then
            B_OPT="-M"
        else
            B_OPT="-m"
        fi

        work_tree="$(git config --get branchdir.$name.work-tree)"
        new_work_tree="$branchdir_base/$new_name"
        git branch $B_OPT "$name" "$new_name"
        if [ -e "$new_work_tree" ]; then
            if [ -n "$OPT_M" ]; then
                prompt_delete "$new_work_tree"
                if [ -d "$new_work_tree" ]; then
                    git branch -m "$new_name" "$name"
                    die_with_status 128 "fatal: failed to remove existing directory: '$new_work_tree'"
                fi
            else
                git branch -m "$new_name" "$name"
                die_with_status 128 "fatal: A directory named '$new_work_tree' already exists."
            fi
        fi
        mv "$work_tree" "$new_work_tree"
        git config --remove-section branchdir.$name
        git config --add branchdir.$new_name.work-tree $new_work_tree
        exit 0
    fi

    if [ $# -gt 0 ]; then
        local name="$1"
        local start_point="$2"

        if [ -n "$name" ]; then
            work_tree="$branchdir_base/$name"
            git branch $name $start_point
            git-new-workdir $GIT_DIR $work_tree $name
            git config --add branchdir.$name.work-tree $work_tree
        fi
    else
        HEAD="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
        git config --get-regexp branchdir\..*\.work-tree \
            | sed -e 's/branchdir\..*\.work-tree/ /' \
            | sed -e "s|$branchdir_base/*||" \
            | sed -e "s|  $HEAD$|* $HEAD|"
    fi
}

SUBDIRECTORY_OK=1
OPTIONS_SPEC="\
git branchdir <branchdir-name> [<start-point>]
git branchdir (-m | -M) <oldbranchdir> <newbranchdir>
git branchdir (-d | -D) <branchdir-name>
--
h,help  show the help
m       Move/rename a branchdir.
M       Move/rename a branchdir even if the new branchdir already exists.
d       Delete a branchdir.
D       Delete a branchdir irrespective of its merged status.
"
branchdir $@
